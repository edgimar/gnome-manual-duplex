#!/usr/bin/python
# -*- coding: UTF-8 -*-

# Copyright 2006-2007 (C) Raster Software Vigo (Sergio Costas)
# Copyright 2009-2014 (C) Rick Richardson
#
# gmd-applet:
#	This file is part of Gnome Manual Duplex (GMD).  It is for gnome-2.
#
# GMD is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# GMD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import pygtk
pygtk.require('2.0')

import os
import time
import sys
import select
import subprocess
import pwd

needed = ""

try:
    import gamin
except :
    needed += "python-gamin\n"

try:
    import gtk
except:
    needed += "python-gtk2\n"

try:
    import gnomeapplet
except:
    needed += "python-gnome2-desktop\n"
	
try:
    import gobject
except:
    needed += "python-gobject\n"

def send_error(message):
    try:
	fp = open("/var/tmp/gmd/error.log", "a")
    except:
	return
    fp.write(str(pwd.getpwuid(os.getuid())[0]) + ": " + message + "\n")
    fp.close()

def read_line(fp):
    line = fp.readline()
    if line[-1] == '\n':
	line = line[:-1]
    return line

def launch_gmd(filename):
    global directory

    time.sleep(1) # wait one second to ensure that the file is fully wrote
    try:
	fp = open(directory + "/list/" + filename, "r");
    except IOError:
	send_error("Error de E/S")
	return
    newfile = read_line(fp)
    if (-1 != newfile.find("/")):
	# don't allow the '/' in the filename to avoid security issues
	send_error( "Has /: " + newfile)
	return
    print directory + "/" + newfile
    title2 = read_line(fp)
    
    title = ""
    for letter in title2:
	if letter == '"':
	    title += "'"
	elif letter == '\\':
	    title += '/'
	else:
	    title += letter
    print title
    copies = read_line(fp)
    fp.close()
    print copies
    
    #command = '/usr/bin/gnome-manual-duplex -T "' + title + '" -# ' + copies \
    #	+ ' "' + directory + "/" + newfile + '"'
    command = '/usr/bin/gnome-manual-duplex "' + directory + "/" + newfile + '"'
    send_error(command)
    p = subprocess.Popen(command, shell=True, bufsize=32768)
    p.wait()
    
    command='rm -f "' + directory + "/" + newfile + '" "' + directory \
		+ "/list/" + filename + '"'
    p = subprocess.Popen(command, shell=True, bufsize=32768)
    p.wait()

def read_event2(path, event):
    print "path: " + str(path) + " event: " + str(event)
    if (event == 5): # new file created
	launch_gmd(path)
    return True

def read_event(path, event):
    global fc
    
    print "path: " + str(path) + " event: " + str(event)

    ret = fc.event_pending()
    if ret > 0:
	fc.handle_one_event()
	fc.handle_events()
    return True

def init_scan():
    global fc
    global directory
    global event0
    global request

    try:
	directory = "/var/tmp/gmd/" + str(pwd.getpwuid(os.getuid())[0])
    except :
	send_error("Failed to get the UID")
	return gtk.FALSE

    # erase the directory to ensure that there are no spare works
    p = subprocess.Popen("rm -rf " + directory, shell=True, bufsize=32768)
    p.wait()

    try:
	os.makedirs(directory + "/list")
    except OSError:
	pass
	    
    # set priviliges to RWX-WX-WX, to allow everybody to write into it, but
    # only the user to read, to preserve privacy
    p = subprocess.Popen("chmod 733 " + directory, shell=True, bufsize=32768)
    p.wait()
    p = subprocess.Popen("chmod 733 " + directory + "/list",
			    shell=True, bufsize=32768)
    p.wait()
    
    fc = gamin.WatchMonitor()
    
    if (fc == None):
	send_error("Failed to create a GAMIN session. "
		    + "Check that the GAMIN daemon is running\n")
    
    request = fc.watch_directory(directory + "/list", read_event2)
	    
    if (request == None):
	send_error("Failed to create a GAMIN request. "
		    + "Check that the GAMIN daemon is running\n")

    event0 = gobject.io_add_watch(fc.get_fd(), gobject.IO_IN, read_event)
    
    if (event0 == None):
	send_error("Failed to create a FAM event. "
		    + "Check that the FAM daemon is running\n")


def wdelete_event(widget, event, data=None):
    return False
	
def wdestroy(widget, data=None):
    sys.exit(0)

def factory(applet, iid):
    event_box = gtk.EventBox()
    applet.add(event_box)
    event_box.show()

    image = gtk.Image()
    pixbuf = gtk.gdk.pixbuf_new_from_file(
	"/usr/share/pixmaps/gnome-manual-duplex.png")
    w,h = gtk.icon_size_lookup(gtk.ICON_SIZE_BUTTON)
    scaled = pixbuf.scale_simple(w, h, gtk.gdk.INTERP_BILINEAR)
    image.set_from_pixbuf(scaled)
    event_box.add(image)
    image.show()
    event_box.connect("button-press-event", show_menu, applet)
    tooltips = gtk.Tooltips()
    tooltips.set_tip(image, "Gnome Manual Duplex Applet")
    applet.show_all()
    check_needed()

def add_systray_icon(main_window):
    assert(gtk.gtk_version > (2, 10))

    class GmdStatusIcon(gtk.StatusIcon):
        def __init__(self):
                gtk.StatusIcon.__init__(self)
                menu = '''
                    <ui>
                     <menubar name="Menubar">
                      <menu action="Menu">
                       <menuitem action="About"/>
                       <menuitem action="Quit"/>
                      </menu>
                     </menubar>
                    </ui>
                '''
                self.mainwindow = main_window
                actions = [ ('Menu',  None, 'Menu'),
                            ('About', gtk.STOCK_ABOUT,
                              '_About...', None, 'About Manual Duplex Applet', self.on_about),
                            ('Quit', gtk.STOCK_QUIT,
                              '_Quit', None, '', self.on_quit)]
                ag = gtk.ActionGroup('Actions')
                ag.add_actions(actions)
                self.manager = gtk.UIManager()
                self.manager.insert_action_group(ag, 0)
                self.manager.add_ui_from_string(menu)
                self.menu = self.manager.get_widget('/Menubar/Menu/About').props.parent
                self.set_from_file("/usr/share/pixmaps/gnome-manual-duplex.png")
                self.set_tooltip("Manual Duplex Applet")
                self.set_visible(True)
                self.connect('activate', self.on_activate)
                self.connect('popup-menu', self.on_popup_menu)

        def on_activate(self, data):
            os.system("gnome-manual-duplex")

        def on_popup_menu(self, status, button, time):
                self.menu.popup(None, None, None, button, time)

        def on_about(self, data):
            showAboutDialog(data)
            
        def on_quit(self, data):
            gtk.main_quit()
 
    GmdStatusIcon()
    check_needed()

def create_menu (applet):
    propxml="""
	    <popup name="button3">
	    <menuitem name="Item 3" verb="About" \
		label="_About Gnome Manual Duplex" \
		pixtype="stock" pixname="gtk-about"/>
	    </popup>
	    """
    verbs = [("About", showAboutDialog)]
    applet.setup_menu(propxml, verbs, None)

def showAboutDialog(self, *arguments, **keywords):
    about = gtk.AboutDialog()
    about.set_name("GMD")
    about.set_program_name("gmd-applet.py")
    about.set_version("v${VERSION}")
    about.set_copyright("Copyright 2014 Rick Richardson. All Rights Reserved.")
    about.set_license("GPL v2")
    about.set_website("http://sourceforge.net/projects/g-manual-duplex")
    about.set_authors( ["Rick Richardson", "Sergio Costas"] )
    about.set_icon_name('printer')
    about.set_logo(None)
    about.run()
    about.destroy()

def show_menu(widget, event, applet):
    if event.type == gtk.gdk.BUTTON_PRESS and event.button == 3:
	widget.emit_stop_by_name("button_press_event")
	create_menu(applet)
    if event.type == gtk.gdk.BUTTON_PRESS and event.button == 1:
	os.system("gnome-manual-duplex")

def check_needed():
    global needed

    os.system(
	'lpadmin -p GnomeManualDuplex -m gnome-manual-duplex.ppd -E -v gmd:/ -L "Virtual Printer"')

    if needed == "":
	init_scan()
    else:
	window = gtk.Window(gtk.WINDOW_TOPLEVEL)
	window.set_title("Error, module not found")
	window.connect("delete_event", wdelete_event)
	window.connect("destroy", wdestroy)
	window.set_border_width(10)
	button = gtk.Button("Ok")
	button.connect("clicked", wdestroy, None)
	label = gtk.Label("You need to install the following python modules in order to use GMD:\n\n" + needed)
	box = gtk.VBox()
	window.add(box)
	box.add(label)
	box.add(button)
	button.show()
	label.show()
	box.show()
	window.show()
    
    return gtk.TRUE

fc = None
request = None
event0 = None
directory = ""
window = None

if (len(sys.argv) == 2) and (sys.argv[1] == "standalone"):
    check_needed()
    gtk.main()
elif (len(sys.argv) == 2) and (sys.argv[1] == "run-in-window"):
    main_window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    main_window.set_title("Python Applet")
    main_window.connect("destroy", gtk.main_quit)
    app = gnomeapplet.Applet()
    factory(app, None)
    app.reparent(main_window)
    main_window.show_all()
    gtk.main()
    sys.exit()
elif (len(sys.argv) == 2) and (sys.argv[1] == "run-in-tray"):
    main_window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    main_window.set_title("Python Applet")
    main_window.connect("destroy", gtk.main_quit)
    add_systray_icon(main_window)
    main_window.iconify()
    main_window.show_all()
    gtk.main()
    sys.exit()
else:
    gnomeapplet.bonobo_factory("OAFIID:GNOME_GMD_applet_Factory",
	gnomeapplet.Applet.__gtype__, "GMD", "3", factory)
